generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  cognitoId             String?                @unique
  email                 String                 @unique
  name                  String
  role                  Role                   @default(USER)
  activo                Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLoginAt           DateTime?
  codigo                String                 @unique
  password              String?
  gastosGenerales       GastoGeneral[]
  movimientosInventario MovimientoInventario[]
  pedidos               Pedido[]
  presupuestos          Presupuesto[]
  transacciones         Transaccion[]
  gastosPresupuesto     GastoPresupuesto[]
  comprasMateriales     CompraMaterial[]       // NUEVO

  @@map("users")
}

model Cliente {
  id            String        @id @default(uuid())
  codigo        String        @unique
  nombre        String
  email         String?
  telefono      String?
  direccion     String?
  cuit          String?
  notas         String?
  activo        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cheques       Cheque[]
  pedidos       Pedido[]
  presupuestos  Presupuesto[]
  transacciones Transaccion[]

  @@map("clientes")
}

model Proveedor {
  id                String           @id @default(uuid())
  codigo            String           @unique
  nombre            String
  email             String?
  telefono          String?
  direccion         String?
  cuit              String?
  notas             String?
  activo            Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  materiales        Material[]
  transacciones     Transaccion[]
  comprasMateriales CompraMaterial[] // NUEVO

  @@map("proveedores")
}

model Material {
  id                    String                 @id @default(uuid())
  codigo                String                 @unique
  nombre                String
  descripcion           String?
  tipo                  TipoMaterial
  unidadMedida          String
  precioUnitario        Decimal                @db.Decimal(10, 2)
  moneda                Moneda                 @default(PESOS)
  stockActual           Decimal                @default(0) @db.Decimal(10, 2)
  stockMinimo           Decimal                @default(0) @db.Decimal(10, 2)
  activo                Boolean                @default(true)
  proveedorId           String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  proveedor             Proveedor              @relation(fields: [proveedorId], references: [id])
  materialPedido        MaterialPedido[]
  materialPresupuesto   MaterialPresupuesto[]
  movimientosInventario MovimientoInventario[]
  compras               CompraMaterial[]       // NUEVO

  @@map("materiales")
}

model Presupuesto {
  id              String                @id @default(uuid())
  numero          String                @unique
  clienteId       String
  fechaEmision    DateTime              @default(now())
  fechaValidez    DateTime
  estado          EstadoPresupuesto     @default(PENDIENTE)
  subtotal        Decimal               @db.Decimal(12, 2)
  descuento       Decimal?              @default(0) @db.Decimal(10, 2)
  impuestos       Decimal?              @default(0) @db.Decimal(10, 2)
  total           Decimal               @db.Decimal(12, 2)
  moneda          Moneda                @default(PESOS)
  descripcionObra String?
  observaciones   String?
  condicionesPago String?
  tiempoEntrega   String?
  validezDias     Int                   @default(30)
  userId          String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  items           ItemPresupuesto[]
  materiales      MaterialPresupuesto[]
  pedido          Pedido?
  cliente         Cliente               @relation(fields: [clienteId], references: [id])
  user            User                  @relation(fields: [userId], references: [id])
  gastos          GastoPresupuesto[]

  @@map("presupuestos")
}

model ItemPresupuesto {
  id             String      @id @default(uuid())
  presupuestoId  String
  orden          Int
  descripcion    String
  detalle        String?
  cantidad       Decimal     @db.Decimal(10, 3)
  unidad         String
  precioUnitario Decimal     @db.Decimal(10, 2)
  descuento      Decimal?    @default(0) @db.Decimal(5, 2)
  total          Decimal     @db.Decimal(12, 2)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  presupuesto    Presupuesto @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)

  @@map("items_presupuesto")
}

model MaterialPresupuesto {
  id             String      @id @default(uuid())
  presupuestoId  String
  materialId     String
  cantidad       Decimal     @db.Decimal(10, 3)
  precioUnitario Decimal     @db.Decimal(10, 2)
  total          Decimal     @db.Decimal(12, 2)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  material       Material    @relation(fields: [materialId], references: [id])
  presupuesto    Presupuesto @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)

  @@map("materiales_presupuesto")
}

model Pedido {
  id                String           @id @default(uuid())
  numero            String           @unique
  clienteId         String
  presupuestoId     String?          @unique
  fechaPedido       DateTime         @default(now())
  fechaEntrega      DateTime?
  fechaEntregaReal  DateTime?
  fechaInicio       DateTime?        // NUEVO: Para el seguimiento de obras
  estado            EstadoPedido     @default(PENDIENTE)
  prioridad         Prioridad        @default(NORMAL)
  porcentajeAvance  Decimal          @default(0) @db.Decimal(5, 2)
  subtotal          Decimal          @db.Decimal(12, 2)
  descuento         Decimal?         @default(0) @db.Decimal(10, 2)
  impuestos         Decimal?         @default(0) @db.Decimal(10, 2)
  total             Decimal          @db.Decimal(12, 2)
  moneda            Moneda           @default(PESOS)
  totalCobrado      Decimal          @default(0) @db.Decimal(12, 2)
  saldoPendiente    Decimal          @default(0) @db.Decimal(12, 2)
  descripcionObra   String?
  observaciones     String?
  condicionesPago   String?
  lugarEntrega      String?
  userId            String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  gastos            GastoPedido[]
  materiales        MaterialPedido[]
  cliente           Cliente          @relation(fields: [clienteId], references: [id])
  presupuesto       Presupuesto?     @relation(fields: [presupuestoId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  transacciones     Transaccion[]
  items             ItemPedido[]
  comprasMateriales CompraMaterial[] // NUEVO: Compras vinculadas a esta obra

  @@map("pedidos")
}

model ItemPedido {
  id             String  @id @default(uuid())
  pedidoId       String
  orden          Int
  descripcion    String
  detalle        String?
  cantidad       Decimal @db.Decimal(10, 3)
  unidad         String
  precioUnitario Decimal @db.Decimal(10, 2)
  descuento      Decimal? @db.Decimal(5, 2) @default(0)
  total          Decimal @db.Decimal(12, 2)
  pedido         Pedido  @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("items_pedido")
}

model MaterialPedido {
  id             String    @id @default(uuid())
  pedidoId       String
  materialId     String
  cantidad       Decimal   @db.Decimal(10, 3)
  precioUnitario Decimal   @db.Decimal(10, 2)
  total          Decimal   @db.Decimal(12, 2)
  entregado      Boolean   @default(false)
  fechaEntrega   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  material       Material  @relation(fields: [materialId], references: [id])
  pedido         Pedido    @relation(fields: [pedidoId], references: [id], onDelete: Cascade)

  @@map("materiales_pedido")
}

model MedioPago {
  id                String           @id @default(uuid())
  nombre            String           @unique
  descripcion       String?
  activo            Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  transacciones     Transaccion[]
  comprasMateriales CompraMaterial[] // NUEVO

  @@map("medios_pago")
}

model Transaccion {
  id                  String          @id @default(uuid())
  numero              String          @unique
  tipo                TipoTransaccion
  concepto            String
  descripcion         String?
  monto               Decimal         @db.Decimal(12, 2)
  moneda              Moneda          @default(PESOS)
  cotizacion          Decimal?        @db.Decimal(10, 4)
  fecha               DateTime        @default(now())
  fechaVencimiento    DateTime?
  numeroComprobante   String?
  tipoComprobante     String?
  clienteId           String?
  proveedorId         String?
  pedidoId            String?
  medioPagoId         String
  userId              String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  cheque              Cheque?
  cliente             Cliente?        @relation(fields: [clienteId], references: [id])
  medioPago           MedioPago       @relation(fields: [medioPagoId], references: [id])
  pedido              Pedido?         @relation(fields: [pedidoId], references: [id])
  proveedor           Proveedor?      @relation(fields: [proveedorId], references: [id])
  user                User            @relation(fields: [userId], references: [id])
  compraMaterialId    String?         // NUEVO: Relación con compra de material
  compraMaterial      CompraMaterial? @relation(fields: [compraMaterialId], references: [id], map: "transaccion_compra_material")

  @@map("transacciones")
}

model GastoPresupuesto {
  id            String      @id @default(uuid())
  numero        String      @unique
  presupuestoId String
  descripcion   String
  categoria     String
  subcategoria  String?
  monto         Decimal     @db.Decimal(12, 2)
  moneda        Moneda      @default(PESOS)
  fecha         DateTime    @default(now())
  comprobante   String?
  proveedor     String?
  notas         String?
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  presupuesto   Presupuesto @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])

  @@map("gastos_presupuesto")
}

model Cheque {
  id               String       @id @default(uuid())
  numero           String
  banco            String
  sucursal         String?
  cuit             String?
  fechaEmision     DateTime
  fechaVencimiento DateTime
  monto            Decimal      @db.Decimal(12, 2)
  moneda           Moneda       @default(PESOS)
  estado           EstadoCheque @default(CARTERA)
  fechaCobro       DateTime?
  motivoRechazo    String?
  clienteId        String?
  transaccionId    String?      @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  cliente          Cliente?     @relation(fields: [clienteId], references: [id])
  transaccion      Transaccion? @relation(fields: [transaccionId], references: [id])

  @@map("cheques")
}

model GastoGeneral {
  id            String   @id @default(uuid())
  numero        String   @unique
  descripcion   String
  categoria     String
  subcategoria  String?
  monto         Decimal  @db.Decimal(12, 2)
  moneda        Moneda   @default(PESOS)
  fecha         DateTime @default(now())
  periodo       String?
  numeroFactura String?
  proveedor     String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@map("gastos_generales")
}

model GastoPedido {
  id          String   @id @default(uuid())
  pedidoId    String
  descripcion String
  categoria   String
  monto       Decimal  @db.Decimal(12, 2)
  moneda      Moneda   @default(PESOS)
  fecha       DateTime @default(now())
  comprobante String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pedido      Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)

  @@map("gastos_pedido")
}

model Configuracion {
  id        String   @id @default(uuid())
  clave     String   @unique
  valor     String
  tipo      String
  grupo     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configuracion")
}

model MovimientoInventario {
  id               String         @id @default(uuid())
  materialId       String
  tipo             TipoMovimiento
  cantidad         Decimal        @db.Decimal(10, 3)
  stockAnterior    Decimal        @db.Decimal(10, 3)
  stockNuevo       Decimal        @db.Decimal(10, 3)
  motivo           String
  referencia       String?
  fecha            DateTime       @default(now())
  userId           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  material         Material       @relation(fields: [materialId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
  compraMaterialId String?        // NUEVO: Relación con compra de material
  compraMaterial   CompraMaterial? @relation(fields: [compraMaterialId], references: [id], map: "movimiento_compra_material")

  @@map("movimientos_inventario")
}

// NUEVO: Modelo para compras de materiales
model CompraMaterial {
  id                    String                @id @default(uuid())
  numero                String                @unique
  materialId            String
  proveedorId           String
  ventaId               String?               // Opcional: vincular a obra específica
  cantidad              Decimal               @db.Decimal(10, 3)
  precioUnitario        Decimal               @db.Decimal(10, 2)
  subtotal              Decimal               @db.Decimal(12, 2)
  impuestos             Decimal?              @db.Decimal(10, 2) @default(0)
  total                 Decimal               @db.Decimal(12, 2)
  moneda                Moneda                @default(PESOS)
  
  // Datos de la factura/comprobante
  numeroFactura         String
  cuitProveedor         String
  fechaCompra           DateTime              @default(now())
  fechaPago             DateTime?
  fechaVencimiento      DateTime?
  
  // Medio de pago
  medioPagoId           String
  
  // Estado del pago
  estadoPago            EstadoPago            @default(PENDIENTE)
  
  // Observaciones
  observaciones         String?
  
  // Archivos adjuntos
  archivoFactura        String?               // URL del archivo
  archivoRecibo         String?               // URL del recibo generado
  
  // Usuario que registró la compra
  userId                String
  
  // Relaciones
  material              Material              @relation(fields: [materialId], references: [id])
  proveedor             Proveedor             @relation(fields: [proveedorId], references: [id])
  venta                 Pedido?               @relation(fields: [ventaId], references: [id])
  medioPago             MedioPago             @relation(fields: [medioPagoId], references: [id])
  user                  User                  @relation(fields: [userId], references: [id])
  
  // Movimiento de inventario asociado
  movimientosInventario MovimientoInventario[]
  
  // Transacciones contables asociadas
  transacciones         Transaccion[]
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  @@map("compras_materiales")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum TipoMaterial {
  PERFIL
  VIDRIO
  ACCESORIO
  HERRAMIENTAS
  INSUMOS
  OTRO
}

enum EstadoPresupuesto {
  BORRADOR
  PENDIENTE
  ENVIADO
  APROBADO
  RECHAZADO
  VENCIDO
  CONVERTIDO
}

enum EstadoPedido {
  BORRADOR
  PENDIENTE
  CONFIRMADO
  EN_PROCESO
  EN_PRODUCCION
  LISTO_ENTREGA
  ENTREGADO
  FACTURADO
  COBRADO
  CANCELADO
}

enum Prioridad {
  BAJA
  NORMAL
  ALTA
  URGENTE
}

enum TipoTransaccion {
  INGRESO
  EGRESO
  ANTICIPO
  PAGO_OBRA
  PAGO_PROVEEDOR
  GASTO_GENERAL
  TRANSFERENCIA
  AJUSTE
  COMPRA_MATERIAL // NUEVO
}

enum EstadoCheque {
  CARTERA
  DEPOSITADO
  COBRADO
  RECHAZADO
  ANULADO
  ENDOSADO
}

enum Moneda {
  PESOS
  DOLARES
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
  AJUSTE
  COMPRA // NUEVO
}

enum TipoLiquidacion {
  PORCENTAJE
  MONTO_FIJO
}

// NUEVO: Enum para estado de pago
enum EstadoPago {
  PENDIENTE
  PAGADO
  VENCIDO
  CANCELADO
}