generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  cognitoId             String?                @unique
  email                 String                 @unique
  name                  String
  role                  Role                   @default(USER)
  activo                Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLoginAt           DateTime?
  codigo                String                 @unique
  password              String?
  gastosGenerales       GastoGeneral[]
  movimientosInventario MovimientoInventario[]
  pedidos               Pedido[]
  presupuestos          Presupuesto[]
  transacciones         Transaccion[]

  @@map("users")
}

model Cliente {
  id            String        @id @default(uuid())
  codigo        String        @unique
  nombre        String
  email         String?
  telefono      String?
  direccion     String?
  cuit          String?
  notas         String?
  activo        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cheques       Cheque[]
  pedidos       Pedido[]
  presupuestos  Presupuesto[]
  transacciones Transaccion[]

  @@map("clientes")
}

model Proveedor {
  id            String        @id @default(uuid())
  codigo        String        @unique
  nombre        String
  email         String?
  telefono      String?
  direccion     String?
  cuit          String?
  notas         String?
  activo        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  materiales    Material[]
  transacciones Transaccion[]

  @@map("proveedores")
}

model Material {
  id                    String                 @id @default(uuid())
  codigo                String                 @unique
  nombre                String
  descripcion           String?
  tipo                  TipoMaterial
  unidadMedida          String
  precioUnitario        Decimal                @db.Decimal(10, 2)
  moneda                Moneda                 @default(PESOS)
  stockActual           Decimal                @default(0) @db.Decimal(10, 2)
  stockMinimo           Decimal                @default(0) @db.Decimal(10, 2)
  activo                Boolean                @default(true)
  proveedorId           String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  proveedor             Proveedor              @relation(fields: [proveedorId], references: [id])
  materialPedido        MaterialPedido[]
  materialPresupuesto   MaterialPresupuesto[]
  movimientosInventario MovimientoInventario[]

  @@map("materiales")
}

model Presupuesto {
  id              String                @id @default(uuid())
  numero          String                @unique
  clienteId       String
  fechaEmision    DateTime              @default(now())
  fechaValidez    DateTime
  estado          EstadoPresupuesto     @default(PENDIENTE)
  subtotal        Decimal               @db.Decimal(12, 2)
  descuento       Decimal?              @default(0) @db.Decimal(10, 2)
  impuestos       Decimal?              @default(0) @db.Decimal(10, 2)
  total           Decimal               @db.Decimal(12, 2)
  moneda          Moneda                @default(PESOS)
  descripcionObra String?
  observaciones   String?
  condicionesPago String?
  tiempoEntrega   String?
  validezDias     Int                   @default(30)
  userId          String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  items           ItemPresupuesto[]
  materiales      MaterialPresupuesto[]
  pedido          Pedido?
  cliente         Cliente               @relation(fields: [clienteId], references: [id])
  user            User                  @relation(fields: [userId], references: [id])

  @@map("presupuestos")
}

model ItemPresupuesto {
  id             String      @id @default(uuid())
  presupuestoId  String
  orden          Int
  descripcion    String
  detalle        String?
  cantidad       Decimal     @db.Decimal(10, 3)
  unidad         String
  precioUnitario Decimal     @db.Decimal(10, 2)
  descuento      Decimal?    @default(0) @db.Decimal(5, 2)
  total          Decimal     @db.Decimal(12, 2)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  presupuesto    Presupuesto @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)

  @@map("items_presupuesto")
}

model MaterialPresupuesto {
  id             String      @id @default(uuid())
  presupuestoId  String
  materialId     String
  cantidad       Decimal     @db.Decimal(10, 3)
  precioUnitario Decimal     @db.Decimal(10, 2)
  total          Decimal     @db.Decimal(12, 2)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  material       Material    @relation(fields: [materialId], references: [id])
  presupuesto    Presupuesto @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)

  @@map("materiales_presupuesto")
}

model Pedido {
  id               String           @id @default(uuid())
  numero           String           @unique
  clienteId        String
  presupuestoId    String?          @unique
  fechaPedido      DateTime         @default(now())
  fechaEntrega     DateTime?
  fechaEntregaReal DateTime?
  estado           EstadoPedido     @default(PENDIENTE)
  prioridad        Prioridad        @default(NORMAL)
  porcentajeAvance Decimal          @default(0) @db.Decimal(5, 2)
  subtotal         Decimal          @db.Decimal(12, 2)
  descuento        Decimal?         @default(0) @db.Decimal(10, 2)
  impuestos        Decimal?         @default(0) @db.Decimal(10, 2)
  total            Decimal          @db.Decimal(12, 2)
  moneda           Moneda           @default(PESOS)
  totalCobrado     Decimal          @default(0) @db.Decimal(12, 2)
  saldoPendiente   Decimal          @default(0) @db.Decimal(12, 2)
  descripcionObra  String?
  observaciones    String?
  condicionesPago  String?
  lugarEntrega     String?
  userId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  gastos           GastoPedido[]
  materiales       MaterialPedido[]
  cliente          Cliente          @relation(fields: [clienteId], references: [id])
  presupuesto      Presupuesto?     @relation(fields: [presupuestoId], references: [id])
  user             User             @relation(fields: [userId], references: [id])
  transacciones    Transaccion[]
  items           ItemPedido[]

  @@map("pedidos")
}

model ItemPedido {
  id              String      @id @default(uuid())
  pedidoId        String
  orden           Int         // Para ordenar los items
  descripcion     String
  detalle         String?
  cantidad        Decimal     @db.Decimal(10, 3)
  unidad          String      // "m2", "metro", "unidad"
  precioUnitario  Decimal     @db.Decimal(10, 2)
  descuento       Decimal?    @db.Decimal(5, 2) @default(0) // Porcentaje
  total           Decimal     @db.Decimal(12, 2)
  
  // Relaciones
  pedido          Pedido      @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("items_pedido")
}

model MaterialPedido {
  id             String    @id @default(uuid())
  pedidoId       String
  materialId     String
  cantidad       Decimal   @db.Decimal(10, 3)
  precioUnitario Decimal   @db.Decimal(10, 2)
  total          Decimal   @db.Decimal(12, 2)
  entregado      Boolean   @default(false)
  fechaEntrega   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  material       Material  @relation(fields: [materialId], references: [id])
  pedido         Pedido    @relation(fields: [pedidoId], references: [id], onDelete: Cascade)

  @@map("materiales_pedido")
}

model MedioPago {
  id            String        @id @default(uuid())
  nombre        String        @unique
  descripcion   String?
  activo        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transacciones Transaccion[]

  @@map("medios_pago")
}

model Transaccion {
  id                String          @id @default(uuid())
  numero            String          @unique
  tipo              TipoTransaccion
  concepto          String
  descripcion       String?
  monto             Decimal         @db.Decimal(12, 2)
  moneda            Moneda          @default(PESOS)
  cotizacion        Decimal?        @db.Decimal(10, 4)
  fecha             DateTime        @default(now())
  fechaVencimiento  DateTime?
  numeroComprobante String?
  tipoComprobante   String?
  clienteId         String?
  proveedorId       String?
  pedidoId          String?
  medioPagoId       String
  userId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  cheque            Cheque?
  cliente           Cliente?        @relation(fields: [clienteId], references: [id])
  medioPago         MedioPago       @relation(fields: [medioPagoId], references: [id])
  pedido            Pedido?         @relation(fields: [pedidoId], references: [id])
  proveedor         Proveedor?      @relation(fields: [proveedorId], references: [id])
  user              User            @relation(fields: [userId], references: [id])

  @@map("transacciones")
}

model Cheque {
  id               String       @id @default(uuid())
  numero           String
  banco            String
  sucursal         String?
  cuit             String?
  fechaEmision     DateTime
  fechaVencimiento DateTime
  monto            Decimal      @db.Decimal(12, 2)
  moneda           Moneda       @default(PESOS)
  estado           EstadoCheque @default(CARTERA)
  fechaCobro       DateTime?
  motivoRechazo    String?
  clienteId        String?
  transaccionId    String?      @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  cliente          Cliente?     @relation(fields: [clienteId], references: [id])
  transaccion      Transaccion? @relation(fields: [transaccionId], references: [id])

  @@map("cheques")
}

model GastoGeneral {
  id            String   @id @default(uuid())
  numero        String   @unique
  descripcion   String
  categoria     String
  subcategoria  String?
  monto         Decimal  @db.Decimal(12, 2)
  moneda        Moneda   @default(PESOS)
  fecha         DateTime @default(now())
  periodo       String?
  numeroFactura String?
  proveedor     String?
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@map("gastos_generales")
}

model GastoPedido {
  id          String   @id @default(uuid())
  pedidoId    String
  descripcion String
  categoria   String
  monto       Decimal  @db.Decimal(12, 2)
  moneda      Moneda   @default(PESOS)
  fecha       DateTime @default(now())
  comprobante String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pedido      Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)

  @@map("gastos_pedido")
}

model Configuracion {
  id        String   @id @default(uuid())
  clave     String   @unique
  valor     String
  tipo      String
  grupo     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configuracion")
}

model MovimientoInventario {
  id            String         @id @default(uuid())
  materialId    String
  tipo          TipoMovimiento
  cantidad      Decimal        @db.Decimal(10, 3)
  stockAnterior Decimal        @db.Decimal(10, 3)
  stockNuevo    Decimal        @db.Decimal(10, 3)
  motivo        String
  referencia    String?
  fecha         DateTime       @default(now())
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  material      Material       @relation(fields: [materialId], references: [id])
  user          User           @relation(fields: [userId], references: [id])

  @@map("movimientos_inventario")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum TipoMaterial {
  PERFIL
  VIDRIO
  ACCESORIO
  HERRAMIENTAS
  INSUMOS
  OTRO
}

enum EstadoPresupuesto {
  BORRADOR
  PENDIENTE
  ENVIADO
  APROBADO
  RECHAZADO
  VENCIDO
  CONVERTIDO
}

enum EstadoPedido {
  BORRADOR
  PENDIENTE
  CONFIRMADO
  EN_PROCESO
  EN_PRODUCCION
  LISTO_ENTREGA
  ENTREGADO
  FACTURADO
  COBRADO
  CANCELADO
}

enum Prioridad {
  BAJA
  NORMAL
  ALTA
  URGENTE
}

enum TipoTransaccion {
  INGRESO
  EGRESO
  ANTICIPO
  PAGO_OBRA
  PAGO_PROVEEDOR
  GASTO_GENERAL
  TRANSFERENCIA
  AJUSTE
}

enum EstadoCheque {
  CARTERA
  DEPOSITADO
  COBRADO
  RECHAZADO
  ANULADO
  ENDOSADO
}

enum Moneda {
  PESOS
  DOLARES
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
  AJUSTE
}

enum TipoLiquidacion {
  PORCENTAJE
  MONTO_FIJO
}